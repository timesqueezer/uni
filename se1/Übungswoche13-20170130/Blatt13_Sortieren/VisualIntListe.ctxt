#BlueJ class context
comment0.params=
comment0.target=VisualIntListe()
comment0.text=\r\n\ Erzeugt\ eine\ neue\ VisualIntListe\ der\ Groesse\ 100\ und\ fuellt\ sie\r\n\ unsortiert\ mit\ den\ Werten\ von\ 0\ bis\ laenge-1.\r\n
comment1.params=laenge
comment1.target=VisualIntListe(int)
comment1.text=\r\n\ Erzeugt\ eine\ neue\ VisualIntListe\ und\ fuellt\ sie\ unsortiert\ mit\ den\ Werten\r\n\ von\ 0\ bis\ laenge-1.\ \r\n\ \r\n\ Die\ Verzoegerung\ und\ die\ Punktgroesse\ werden\ abhaengig\ von\ der\ gegebenen\ \r\n\ Laenge\ berechnet.\r\n\ \ \r\n\ @param\ laenge\r\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Laenge\ (Kardinalitaet)\ der\ zu\ erzeugenden\ Liste.\ \r\n
comment10.params=
comment10.target=void\ initialisiereAbsteigend()
comment10.text=\r\n\ "Sortiert"\ die\ Liste\ absteigend,\ indem\ einfach\ jeder\ Index\ mit\ dem\r\n\ passenden\ Wert\ Laenge-1..0\ ueberschrieben\ wird.\r\n
comment11.params=
comment11.target=void\ initialisiereAlternierend()
comment11.text=\r\n\ Sortiert\ die\ Liste\ so,\ dass\ ihre\ Eintraege\ tendenziell\ zwischen\ hohen\ und\r\n\ niedrigen\ Werten\ hin\ und\ her\ springen.\r\n
comment12.params=
comment12.target=void\ initialisiereGemischt()
comment12.text=\r\n\ Permutiert\ die\ aktuelle\ Liste\ so,\ dass\ die\ Eintraege\ zufaellig\ angeordnet\r\n\ sind.\ Die\ Liste\ sieht\ nach\ jedem\ Aufruf\ anders\ aus.\r\n
comment13.params=position
comment13.target=void\ zeichne(int)
comment13.text=\r\n\ Zeichnet\ die\ gegebene\ Position\ neu\ und\ wartet\ kurz\r\n
comment2.params=laenge\ verzoegerung\ punktGroesse
comment2.target=VisualIntListe(int,\ int,\ int)
comment2.text=\r\n\ Erzeugt\ eine\ neue\ VisualIntListe\ und\ fuellt\ sie\ unsortiert\ mit\ den\ Werten\r\n\ von\ 0\ bis\ laenge-1.\r\n\ \r\n\ @param\ laenge\r\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Laenge\ (Kardinalitaet)\ der\ zu\ erzeugenden\ Liste\r\n\ @param\ verzoegerung\r\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Verzoegerung\ in\ ms\r\n\ @param\ punktGroesse\r\n\ \ \ \ \ \ \ \ \ \ \ \ jeder\ int-Wert\ wird\ durch\ entsprechend\ viele\ Pixel\ dargestellt\r\n
comment3.params=i\ k
comment3.target=void\ swap(int,\ int)
comment3.text=\r\n\ Vertauscht\ die\ Elemente\ an\ den\ Positionen\ i\ und\ k.\r\n\ \r\n\ @param\ i\ Erste\ Positionsangabe\ eines\ zu\ vertauschenden\ Elements.\r\n\ @param\ k\ Zweite\ Positionsangabe\ eines\ zu\ vertauschenden\ Elements.\r\n
comment4.params=
comment4.target=int\ gibLaenge()
comment4.text=\r\n\ Gib\ die\ Anzahl\ der\ Werte\ in\ der\ Liste\ zurueck.\r\n\ \r\n\ @return\ die\ Anzahl\ der\ Werte\ in\ der\ Liste\r\n
comment5.params=position
comment5.target=boolean\ existiert(int)
comment5.text=\r\n\ Pruefe,\ ob\ sich\ in\ der\ Liste\ an\ der\ angegebenen\ Position\ ein\ int-Wert\r\n\ befindet.\r\n\ \r\n\ @param\ position\r\n\ \ \ \ \ \ \ \ \ \ \ \ die\ zu\ pruefende\ Position\r\n\ @return\ true,\ falls\ (position\ >\=\ 0)\ &&\ (position\ <\ gibLaenge())\r\n
comment6.params=position
comment6.target=void\ pruefe(int)
comment7.params=position
comment7.target=int\ gib(int)
comment7.text=\r\n\ Gib\ den\ Wert\ an\ der\ angegebenen\ Position\ zurueck.\r\n\ \r\n\ @param\ position\r\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Position\ des\ int-Werts,\ der\ zurueckgegeben\ werden\ soll\r\n\ @throws\ IndexOutOfBoundsException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ falls\ \!existiert(position)\r\n\ @return\ der\ Wert\ an\ der\ angegebenen\ Position\r\n
comment8.params=i\ k
comment8.target=void\ vertausche(int,\ int)
comment8.text=\r\n\ Vertausche\ die\ beiden\ Elemente\ an\ den\ angegebenen\ Positionen\ in\ der\r\n\ Liste.\r\n\ \r\n\ @param\ i\r\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Position\ des\ ersten\ Elements\r\n\ @param\ k\r\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Position\ des\ zweiten\ Elements\r\n\ @throws\ IndexOutOfBoundsException\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ falls\ \!(existiert(i)\ &&\ existiert(k))\r\n
comment9.params=
comment9.target=void\ initialisiereAufsteigend()
comment9.text=\r\n\ "Sortiert"\ die\ Liste\ aufsteigend,\ indem\ einfach\ jeder\ Index\ mit\ dem\r\n\ passenden\ Wert\ 0..Laenge-1\ ueberschrieben\ wird.\r\n
numComments=14
