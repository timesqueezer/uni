#lang racket
(require se3-bib/flaggen-module)

; 6549385 Lorenzo Luciano
; 6930992 Franz Krekeler
; 6946325 Matz Radloff


;; Aufgabe 1.1
;; Gegeben ist eine Liste die aus Paaren von char, string besteht.
;; Dabei kann man später mit der Procedure "assoc" das erste Element eines Paares finden, was ein Schlüssel wäre.
;; Wir können also mit Hilfe eines Schlüssel das korrespondierende Element erhalten.
(define Buchstabiertafel
  '( (#\A "Alpha")
     (#\B "Bravo")
     (#\C "Charlie")
     (#\D "Delta")
     (#\E "Echo")
     (#\F "Foxtrot")
     (#\G "Golf")
     (#\H "Hotel")
     (#\I "India")
     (#\J "Juliet")
     (#\K "Kilo")
     (#\L "Lima")
     (#\M "Mike")
     (#\N "November")
     (#\O "Oscar")
     (#\P "Papa")
     (#\Q "Quebec")
     (#\R "Romeo")
     (#\S "Sierra")
     (#\T "Tango")
     (#\U "Uniform")
     (#\V "Viktor")
     (#\W "Whiskey")
     (#\X "X-ray")
     (#\Y "Yankee")
     (#\Z "Zulu")
     (#\0 "Nadazero")
     (#\1 "Unaone")
     (#\2 "Bissotwo")
     (#\3 "Terrathree")
     (#\4 "Kartefour")
     (#\5 "Pantafive")
     (#\6 "Soxisix")
     (#\7 "Setteseven")
     (#\8 "Oktoeight")
     (#\9 "Novenine")
     (#\, "Decimal")
     (#\. "Stop")))

;; Aufgabe 1.2
;; Die Funktion sucht das erste Element der Buchstabiertabelle Liste dessen "car"
;; ist gleich "c", wir bekommen dann das Zweite Element durch ein "cdr". In Prinzip ein char "c" wird auf seine Schlüssel abgebildet.
(define (char->key c)
  (cdr (assoc c Buchstabiertafel)))

;; Aufgabe 1.3
;; Hilfsfunktion: bildet die Kleinbuchstaben auf die entsprechenden Großbuchstaben ab
;; mit Hilfe der ASCII Code.
(define (lower->upper c)
  (char->key
   (if (char<=? #\a c #\z)
       (integer->char (- (char->integer c) 32))
       c)))

;; Die Funktion nimmt ein String und wird auf die Liste der Buchstabierschlüssel agebildet.
;; Aufruf der rekursiven Hilfsfunktion string->list
(define (buchstabieren text)
  (list-char (string->list text))
  )

;; Hilfsfunktion: Aufbau einer neuen Liste aus den substituierten Elementen.
(define (list-char x)
  (if (= (length x) 1)
      (lower->upper (car x))
      (append (lower->upper (car x))
              (list-char (cdr x)))
      )
  )


;; Aufgabe 2.1
;; Ähnlich wie in Aufgabe 1.1 besteht die Liste aus Paaren zwischen ein character und ein Symbol, was in unserem Fall eine Flagge entspricht.

(define Flaggentafel
  '( (#\A A)
     (#\B B)
     (#\C C)
     (#\D D)
     (#\E E)
     (#\F F)
     (#\G G)
     (#\H H)
     (#\I I)
     (#\J J)
     (#\K K)
     (#\L L)
     (#\M M)
     (#\N N)
     (#\O O)
     (#\P P)
     (#\Q Q)
     (#\R R)
     (#\S S)
     (#\T T)
     (#\U U)
     (#\V V)
     (#\W W)
     (#\X X)
     (#\Y Y)
     (#\Z Z)
     (#\0 Z0)
     (#\1 Z1)
     (#\2 Z2)
     (#\3 Z3)
     (#\4 Z4)
     (#\5 Z5)
     (#\6 Z6)
     (#\7 Z7)
     (#\8 Z8)
     (#\9 Z9)))
