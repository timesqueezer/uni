#lang swindle

#|
################################################################################
##                                                                            ##  
##            This file is part of the se3-bib Racket module v3.0             ##  
##                Copyright by Leonie Dreschler-Fischer, 2010                 ##
##              Ported to Racket v6.2.1 by Benjamin Seppke, 2015              ##  
##                                                                            ##  
################################################################################
|#

#|
=================================================================
Module "simEventSourceClass"
          
The active scene elements that cause events to occur
   sim-event-source
   server station
=================================================================
|#

(provide 
 event-count set-event-count!
 event-rate event-sig
 sim-event-source?)
 #| Auto-provides:
        sim-event-source
        next-now-event 
        next-exp-event 
        next-const-event
        next-normal-event
 |#

(require 
  se3-bib/sim/simBase/sim-utility-base-package
  se3-bib/sim/simBase/simActorClass-module
  se3-bib/sim/simBase/queuesClass-module
  se3-bib/sim/simBase/simClockClass-module
  se3-bib/sim/simBase/simEventClass-module
  se3-bib/sim/simBase/simCalendarClass-module)

(defclass* sim-event-source (sim-actor sim-event)
  (events-per-time-unit 
   :reader event-rate
   :type <number>
   :initvalue 1
   :initarg :rate
   :documentation 
   "The mean value of events per time unit generated by the source")
  (event-count  
   :reader event-count
   :writer set-event-count!
   :initvalue 0
   :documentation "The number of events so far")
  :documentation "A source of random events"
  :autopred #t ; auto generate predicate sim-event-source?
  :printer  #t 
  )

(defclass* sim-const-event-source (sim-event-source)
  :documentation "A source of events at constant intervals"
  :autopred #t 
  :printer  #t 
  )

(defclass* sim-exp-event-source (sim-event-source)
  :documentation "A source of uniformally distributed events"
  :autopred #t 
  :printer  #t 
  )

(defclass* sim-normal-event-source (sim-event-source)
  (variance 
   :reader event-sig
   :type <number>
   :initvalue 0.3
   :initarg :sigma
   :documentation 
   "The variance of the time between events generated by the source")
  
  :documentation "A source of normally distributed events"
  :autopred #t 
  :printer  #t 
  )


(defgeneric* next-event ((actor sim-event-source))
  :documentation 
  "Schedule the actor for the next event to occur."
  )

(defgeneric* next-now-event ((actor sim-event-source))
  :documentation 
  "Schedule the actor for an event to take place right now."
  )
(defgeneric* next-exp-event ((actor sim-event-source))
  :documentation 
  "Schedule the actor for the next exponentially distributed event."
  )
(defgeneric* next-normal-event ((actor sim-event-source) 
                                &key (sigma 1))
  :documentation 
  "Schedule the actor for the next exponentially distributed event."
  )

(defgeneric* next-const-event ((actor sim-event-source))
  :documentation 
  "Schedule the actor for the next event with constant intervals between events.")

;For testing
#|
(define a (make sim-event-source))
|#